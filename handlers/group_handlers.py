from aiogram import Router, F, types
from aiogram.filters import CommandObject
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Users, Entertainments, Events

group_router = Router()

@group_router.message(F.text.startswith('!—É–µ–±–∞—Ç—å'))
async def attack_command(message: types.Message):
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        target_username = message.reply_to_message.from_user.username
        sender_username = message.from_user.first_name
        response_text = f"@{target_username} —É–µ–±–∞–ª(–∞) {sender_username}"
        await message.answer(text=response_text)
    else:
        await message.answer(text="–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !—É–µ–±–∞—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ '—É–µ–±–∞—Ç—å'.")





@group_router.message(F.text.startswith("!—Ä–æ–ª—å"))
async def role_command(message: types.Message, session: AsyncSession):
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏—â–µ–º –ø–æ tg_username
    if message.reply_to_message:
        reply_username = message.reply_to_message.from_user.username
        if reply_username:
            if reply_username.startswith('@'):
                reply_username = reply_username[1:]
            user_result = await session.execute(
                select(Users).filter(
                    (Users.tg_username == reply_username) | 
                    (Users.tg_username == f"@{reply_username}")
                )
            )
            user = user_result.scalars().first()
            if user:
                response_text = (
                    f"üë§ <b>{user.fio}</b>\n"
                    f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.post or '‚Äî'}"
                )
            else:
                response_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
            await message.answer(text=response_text, parse_mode="HTML")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            text="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                 "‚Ä¢ <code>!—Ä–æ–ª—å &lt;–¥–æ–ª–∂–Ω–æ—Å—Ç—å&gt;</code> –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n"
                 "‚Ä¢ <code>!—Ä–æ–ª—å &lt;—Ñ–∞–º–∏–ª–∏—è&gt;</code> –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                 "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <code>!—Ä–æ–ª—å</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        )
        return

    query = command_parts[1].strip()

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    users_by_role = await session.execute(
        select(Users).filter(Users.post.ilike(f"%{query}%"))
    )
    users_list = users_by_role.scalars().all()

    if users_list:
        # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        response_text = f"üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '{query}':</b>\n\n"
        for user in users_list:
            tg_username = user.tg_username or '‚Äî'
            if tg_username != '‚Äî' and not tg_username.startswith('@'):
                tg_username = '@' + tg_username
            response_text += f"‚Ä¢ {user.fio} ({tg_username})\n"
    else:
        # 2. –ï—Å–ª–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—â–µ–º –ø–æ —Ñ–∞–º–∏–ª–∏–∏
        user_by_name = await session.execute(
            select(Users).filter(Users.fio.ilike(f"%{query}%"))
        )
        user = user_by_name.scalars().first()

        if user:
            response_text = (
                f"üë§ <b>{user.fio}</b>\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.post or '‚Äî'}"
            )
        else:
            response_text = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."

    await message.answer(text=response_text, parse_mode="HTML")





@group_router.message(F.text.startswith("!–∏–Ω—Ñ–∞"))
async def info_command(message: types.Message, session: AsyncSession):
    target_user = None

    # 1. –ï—Å–ª–∏ reply ‚Äî –∏—â–µ–º –ø–æ tg_id, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ username (—Å @ –∏ –±–µ–∑)
    if message.reply_to_message:
        reply_user = message.reply_to_message.from_user
        # –ü–æ–∏—Å–∫ –ø–æ tg_id
        user_result = await session.execute(
            select(Users).filter(Users.tg_id == str(reply_user.id))
        )
        target_user = user_result.scalars().first()
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ tg_id ‚Äî –∏—â–µ–º –ø–æ username
        if not target_user and reply_user.username:
            username = reply_user.username
            if username.startswith('@'):
                username = username[1:]
            user_result = await session.execute(
                select(Users).filter(
                    (Users.tg_username == username) | (Users.tg_username == f"@{username}")
                )
            )
            target_user = user_result.scalars().first()

    # 2. –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∏—â–µ–º –ø–æ —Ñ–∞–º–∏–ª–∏–∏ (fio)
    else:
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) > 1:
            surname = command_parts[1].strip()
            user_result = await session.execute(
                select(Users).filter(Users.fio.ilike(f"%{surname}%"))
            )
            target_user = user_result.scalars().first()

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if target_user:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        birthday_str = "‚Äî"
        if target_user.birthday:
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "YYYY-MM-DD ..." ‚Äî –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                birthday_str = str(target_user.birthday)
                if len(birthday_str) >= 10:
                    birthday_str = birthday_str[:10]
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ ‚Äî –æ–±—ä–µ–∫—Ç, –º–æ–∂–Ω–æ birthday_str = target_user.birthday.strftime("%d.%m.%Y")
            except Exception:
                pass

        # Username –≤—Å–µ–≥–¥–∞ —Å @
        tg_username = target_user.tg_username or '‚Äî'
        if tg_username != '‚Äî' and not tg_username.startswith('@'):
            tg_username = '@' + tg_username

        response_text = (
            f"üë§ <b>{target_user.fio}</b>\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{target_user.phone_number or '‚Äî'}</code>\n"
            f"‚úâÔ∏è <b>Gmail:</b> <code>{target_user.gmail or '‚Äî'}</code>\n"
            f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {target_user.post or '‚Äî'}\n"
            f"üéÇ <b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday_str}\n"
            f"üì∏ <b>Instagram:</b> {target_user.insta or '‚Äî'}\n"
            f"üí¨ <b>Telegram:</b> {tg_username}\n"
            f"üöá <b>–ú–µ—Ç—Ä–æ:</b> {target_user.metro or '‚Äî'}"
        )
    else:
        response_text = (
            "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>!–∏–Ω—Ñ–∞ &lt;—Ñ–∞–º–∏–ª–∏—è&gt;</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )

    await message.answer(text=response_text, parse_mode="HTML")





@group_router.message(F.text.startswith("!—Ü–∏—Ç–∞—Ç–∞"))
async def quote_command(message: types.Message):
    if message.reply_to_message and message.reply_to_message.text:
        quote_text = message.reply_to_message.text
        author = message.reply_to_message.from_user.full_name
        # In a real application, you would save this to a database.
        # For now, we'll just acknowledge it.
        response_text = f"–¶–∏—Ç–∞—Ç–∞ –æ—Ç {author} –∑–∞–ø–µ—á–∞—Ç–ª–µ–Ω–∞: \"{quote_text}\""
        await message.answer(text=response_text)
    else:
        await message.answer(text="–ß—Ç–æ–±—ã –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å —Ü–∏—Ç–∞—Ç—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ü–∏—Ç–∞—Ç—É.")





@group_router.message(F.text == "!–º—É–¥—Ä–æ—Å—Ç—å")
async def wisdom_command(message: types.Message):
    quotes = [
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "–ë—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –º–∏—Ä–µ. ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏",
        "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ç–æ–±–æ–π, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω—ã. ‚Äî –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
        "–ù–µ—É–¥–∞—á–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–æ —É–∂–µ –±–æ–ª–µ–µ –º—É–¥—Ä–æ. ‚Äî –ì–µ–Ω—Ä–∏ –§–æ—Ä–¥",
        "–ï—Å–ª–∏ —Ç—ã –Ω–µ –µ–¥–µ—à—å –Ω–∞ –≤—Å–ø—ã—à–∫—É, —Ç–æ —Ç—ã –¥–æ–ª–±–∞–µ–±. ‚Äî –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω"
    ]
    import random
    random_quote = random.choice(quotes)
    await message.answer(text=f"–ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è: {random_quote}")





@group_router.message(F.text.startswith("!—Ä–∏–Ω–≥"))
async def ring_command(message: types.Message):
    if message.reply_to_message:
        target_username = message.reply_to_message.from_user.full_name
        sender_username = message.from_user.full_name
        
        # Simulate a random winner
        import random
        winner = random.choice([sender_username, target_username])
        loser = sender_username if winner == target_username else target_username

        response_text = f"{sender_username} –≤—ã–∑—ã–≤–∞–µ—Ç {target_username} –Ω–∞ —Ä–∏–Ω–≥!\n"
        response_text += f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}!\n"
        response_text += f"{loser} —É–ª–µ—Ç–∞–µ—Ç –≤ –±–∞–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç (—Å–∏–º—É–ª—è—Ü–∏—è)."
        
        await message.answer(text=response_text)
    else:
        await message.answer(text="–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —Ä–∏–Ω–≥, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑–∏—Ç—å—Å—è.")





@group_router.message(F.text == "!–∞–Ω–º—É—Ç")
async def unban_command(message: types.Message):
    await message.answer(text="–í—Å–µ, –∫—Ç–æ –±—ã–ª –≤—ã–±—Ä–æ—à–µ–Ω –∑–∞ —Ä–∏–Ω–≥, –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!")





@group_router.message(F.text == "!—Ä—É–ª–µ—Ç–∫–∞")
async def roulette_command(message: types.Message):
    import random
    if random.randint(1, 6) == 1:
        response_text = f"@{(message.from_user.full_name)}, —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ! –ë–æ—Ç –±–∞–Ω–∏—Ç —Ç–µ–±—è –Ω–∞ 10 –º–∏–Ω—É—Ç (—Å–∏–º—É–ª—è—Ü–∏—è)."
    else:
        response_text = f"@{(message.from_user.full_name)}, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ! –í —ç—Ç–æ—Ç —Ä–∞–∑ –æ–±–æ—à–ª–æ—Å—å."
    await message.answer(text=response_text)





@group_router.message(F.text == "!–∫–ª–∞–¥–±–∏—â–µ")
async def graveyard_command(message: types.Message):
    # In a real application, this would query a database for banned users.
    # For now, we'll use a placeholder list.
    banned_users = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å3"]
    if banned_users:
        response_text = "–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ:\n" + "\n".join(banned_users)
    else:
        response_text = "–í —á–∞—Ç–µ –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await message.answer(text=response_text)





@group_router.message(F.text.startswith("!–∫—Ç–æ"))
async def who_command(message: types.Message, session: AsyncSession):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: !–∫—Ç–æ —Å–∞–º—ã–π —É–º–Ω—ã–π")
        return

    text_query = command_parts[1].strip()
    
    # Fetch all users from the database
    users = await session.execute(select(Users))
    users_list = users.scalars().all()

    if users_list:
        import random
        # For a simple implementation, pick a random user
        # A more complex implementation would involve NLP and similarity matching
        random_user = random.choice(users_list)
        response_text = f"–Ø –¥—É–º–∞—é, —á—Ç–æ \"{text_query}\" –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç @{random_user.tg_username} ({random_user.fio})."
    else:
        response_text = "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await message.answer(text=response_text)





@group_router.message(F.text.startswith("!–∫–æ–≥–¥–∞"))
async def when_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ. –ü—Ä–∏–º–µ—Ä: !–∫–æ–≥–¥–∞ –ù–æ–≤—ã–π –≥–æ–¥")
        return

    event_query = command_parts[1].strip()
    
    # This is a placeholder. In a real scenario, you would look up events in a database.
    # For demonstration, we'll provide a generic answer.
    response_text = f"–°–æ–±—ã—Ç–∏–µ \"{event_query}\" –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –µ–≥–æ –≤—Ä–µ–º—è. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã!"
    await message.answer(text=response_text)





@group_router.message(F.text.startswith("!–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"))
async def probability_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ. –ü—Ä–∏–º–µ—Ä: !–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø–æ–π–¥–µ—Ç –¥–æ–∂–¥—å")
        return

    event_query = command_parts[1].strip()
    import random
    probability = random.randint(0, 100)
    response_text = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ {event_query}, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probability}%."
    await message.answer(text=response_text)





@group_router.message(F.text.startswith("!—Ä–∞–∑–±—É–¥–∏—Ç—å"))
async def wake_up_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: !—Ä–∞–∑–±—É–¥–∏—Ç—å YYYY-MM-DD HH:MM:SS")
        return

    datetime_str = command_parts[1].strip()
    # In a real application, you would parse this datetime and schedule a task.
    # For now, we just acknowledge the request.
    response_text = f"–†–∞–∑–±—É–¥—è—à–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {datetime_str}."
    await message.answer(text=response_text)





@group_router.message(F.text.startswith("!–Ω–µ –±—É–¥–∏—Ç—å"))
async def do_not_wake_up_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: !–Ω–µ –±—É–¥–∏—Ç—å YYYY-MM-DD HH:MM:SS")
        return

    datetime_str = command_parts[1].strip()
    # In a real application, you would cancel the scheduled task.
    # For now, we just acknowledge the request.
    response_text = f"–†–∞–∑–±—É–¥—è—à–∫–∞ –Ω–∞ {datetime_str} –æ—Ç–º–µ–Ω–µ–Ω–∞."
    await message.answer(text=response_text)





@group_router.message(F.text == "!—Ä–∞–∑–±—É–¥—è—à–∫–∏")
async def wake_up_list_command(message: types.Message):
    # In a real application, this would query a database for scheduled wake-up calls.
    # For now, we'll use a placeholder.
    scheduled_wakeups = [
        "2024-05-03 12:30:00 (–¥–ª—è @user1)",
        "2024-05-04 08:00:00 (–¥–ª—è @user2)"
    ]
    if scheduled_wakeups:
        response_text = "–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ä–∞–∑–±—É–¥—è—à–µ–∫:\n" + "\n".join(scheduled_wakeups)
    else:
        response_text = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±—É–¥—è—à–µ–∫."
    await message.answer(text=response_text)





@group_router.message(F.text == "!–æ—Ä–≥ –¥–Ω—è")
async def org_day_command(message: types.Message):
    # This would typically fetch the organizer from a database or configuration.
    # For now, a placeholder.
    organizer = "–í–∞—Å—è –ü—É–ø–∫–∏–Ω"
    await message.answer(text=f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–Ω—è –í—Å–ø—ã—à–∫–∏: {organizer}")





@group_router.message(F.text == "!–ø–æ–¥—Å–∫–∞–∂–∏")
async def suggest_command(message: types.Message):
    suggestions = [
        "–ë—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É!",
        "–°–ø—Ä–æ—Å–∏ —É –¥—Ä—É–≥–∞.",
        "–ü–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑.",
        "–î–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏.",
        "–°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –≤–µ—Ä–Ω–∏—Å—å –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ."
    ]
    import random
    response_text = random.choice(suggestions)
    await message.answer(text=f"–ë–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç: {response_text}")





@group_router.message(F.text == "!–∂—ã–∑–Ω—å")
async def life_command(message: types.Message):
    # This would ideally calculate based on user's birthdate from the Users table.
    # For now, a placeholder.
    import datetime
    today = datetime.date.today()
    # Assuming a fixed birthdate for demonstration
    birthdate = datetime.date(1990, 1, 1)
    days_lived = (today - birthdate).days
    await message.answer(text=f"–í—ã –ø—Ä–æ–∂–∏–ª–∏ {days_lived} –¥–Ω–µ–π.")





@group_router.message(F.text == "!—á—Ç–æ –ø–æ–µ—Å—Ç—å")
async def what_to_eat_command(message: types.Message):
    food_suggestions = [
        "–ü–∏—Ü—Ü–∞",
        "–°—É—à–∏",
        "–ë–æ—Ä—â",
        "–ü–∞—Å—Ç–∞",
        "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
        "–®–∞—à–ª—ã–∫"
    ]
    import random
    response_text = random.choice(food_suggestions)
    await message.answer(text=f"–ë–æ—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ª—É—á—à–µ –ø–æ–µ—Å—Ç—å: {response_text}")





@group_router.message(F.text == "!–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç")
async def compliment_command(message: types.Message):
    compliments = [
        "–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
        "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –æ–∑–∞—Ä—è–µ—Ç –∫–æ–º–Ω–∞—Ç—É.",
        "–¢—ã –æ—á–µ–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫.",
        "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—â–∞—Ç—å—Å—è.",
        "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ."
    ]
    import random
    response_text = random.choice(compliments)
    await message.answer(text=f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")





@group_router.message(F.text.in_([
    '!—É–µ–±–∞—Ç—å', '!–æ–±–Ω—è—Ç—å', '!—Å–µ–∫—Å', '!–ø–æ–∂–∞—Ç—å —Ä—É–∫—É', '!–ø–æ–≥–ª–∞–¥–∏—Ç—å', 
    '!–æ—Ç–¥–∞—Ç—å', '!–≤–∞—Ö—Ç–∞', '!–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è', '!–≤—ã–ø–∏—Ç—å', '!–∫—É–ø–∞—Ç—å—Å—è', 
    '!–±—Ä—ã–∑–≥–∞—Ç—å—Å—è', '!–Ω–∞—à–∞ —Ä–∞—à–∞'
]))
async def interactive_commands(message: types.Message, session: AsyncSession):
    if message.reply_to_message:
        command_text = message.text.lstrip('!')
        target_username = message.reply_to_message.from_user.full_name
        sender_username = message.from_user.full_name

        # Fetch entertainment data from the database
        entertainment = await session.execute(
            select(Entertainments).filter(Entertainments.name_ent == command_text)
        )
        entertainment = entertainment.scalars().first()

        if entertainment:
            response_text = f"@{target_username}, —Ç–µ–±—è {entertainment.declension} (–æ—Ç {sender_username})"
        else:
            # Fallback if not found in DB
            action_map = {
                '—É–µ–±–∞—Ç—å': '—É–µ–±–∞–ª–∏',
                '–æ–±–Ω—è—Ç—å': '–æ–±–Ω—è–ª–∏',
                '—Å–µ–∫—Å': '–∑–∞–Ω—è–ª–∏—Å—å —Å–µ–∫—Å–æ–º —Å',
                '–ø–æ–∂–∞—Ç—å —Ä—É–∫—É': '–ø–æ–∂–∞–ª–∏ —Ä—É–∫—É',
                '–ø–æ–≥–ª–∞–¥–∏—Ç—å': '–ø–æ–≥–ª–∞–¥–∏–ª–∏',
                '–æ—Ç–¥–∞—Ç—å': '–æ—Ç–¥–∞–ª–∏ –∫–æ–µ-—á—Ç–æ',
                '–≤–∞—Ö—Ç–∞': '–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–∞—Ö—Ç—É',
                '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è': '—Ä–∞–∑–±—É–¥–∏–ª–∏',
                '–≤—ã–ø–∏—Ç—å': '–≤—ã–ø–∏–ª–∏ —Å',
                '–∫—É–ø–∞—Ç—å—Å—è': '–∏—Å–∫—É–ø–∞–ª–∏',
                '–±—Ä—ã–∑–≥–∞—Ç—å—Å—è': '–æ–±—Ä—ã–∑–≥–∞–ª–∏',
                '–Ω–∞—à–∞ —Ä–∞—à–∞': '–ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ù–∞—à—É –†–∞—à—É —Å'
            }
            declension = action_map.get(command_text, command_text)
            response_text = f"@{target_username}, —Ç–µ–±—è {declension} (–æ—Ç {sender_username})"
        
        await message.answer(text=response_text)
    else:
        await message.answer(text=f"–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É {message.text}, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞.")

@group_router.message(F.text.startswith("!–Ω–∞—Ö—É–π"))
async def nahuy_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –ø–æ—Å–ª–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: !–Ω–∞—Ö—É–π —Ä–∞–±–æ—Ç—É")
        return
    
    target = command_parts[1].strip()
    response_text = f"–ü–æ—à–µ–ª –Ω–∞—Ö—É–π {target}!"
    await message.answer(text=response_text)
