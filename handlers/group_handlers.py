import asyncio
import textwrap
from aiogram import Bot, Router, F, types
from aiogram.filters import CommandObject
import requests
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from PIL import Image, ImageDraw, ImageFont
import os
import re
from pathlib import Path
from datetime import datetime, timedelta
from aiogram.types import InputFile
import random
from aiogram.types import ChatPermissions
from io import BytesIO
from database.models import BeerStats, Mutes, Quotes, Users, Entertainments, Events, WakeUps
from aiogram.types import BufferedInputFile   
import traceback
from utils.deepseek_worker import chat_stream
from utils.metro_coords import metro_coordinates
from geopy.distance import geodesic
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())


BASE_DIR = Path(__file__).resolve().parent.parent   
TEMPLATES_DIR = BASE_DIR / "templates" 

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø—Ä–æ—Å—ã
ALLOWED_USERS = {204826604, 1231550008, 922109605}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–ø—Ä–æ—Å
TARGET_GROUP_ID = -1002831240250 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class PollCreation(StatesGroup):
    waiting_for_question = State()
    waiting_for_option_count = State()
    waiting_for_options = State()
    waiting_for_poll_type = State()

scheduler = AsyncIOScheduler()

group_router = Router()

@group_router.message(F.text.startswith('!—É–µ–±–∞—Ç—å'))
async def attack_command(message: types.Message):
    if message.reply_to_message:
        target_user_id = message.reply_to_message.from_user.id
        target_username = message.reply_to_message.from_user.username
        sender_username = message.from_user.first_name
        response_text = f"@{target_username} —É–µ–±–∞–ª(–∞) {sender_username}"
        await message.answer(text=response_text)
    else:
        await message.answer(text="–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !—É–µ–±–∞—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ '—É–µ–±–∞—Ç—å'.")


@group_router.message(F.text.startswith("!—Ä–æ–ª—å"))
async def role_command(message: types.Message, session: AsyncSession):
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏—â–µ–º –ø–æ tg_username
    if message.reply_to_message:
        reply_username = message.reply_to_message.from_user.username
        if reply_username:
            if reply_username.startswith('@'):
                reply_username = reply_username[1:]
            user_result = await session.execute(
                select(Users).filter(
                    (Users.tg_username == reply_username) | 
                    (Users.tg_username == f"@{reply_username}")
                )
            )
            user = user_result.scalars().first()
            if user:
                response_text = (
                    f"üë§ <b>{user.fio}</b>\n"
                    f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.post or '‚Äî'}"
                )
            else:
                response_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
            await message.answer(text=response_text, parse_mode="HTML")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(
            text="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                 "‚Ä¢ <code>!—Ä–æ–ª—å &lt;–¥–æ–ª–∂–Ω–æ—Å—Ç—å&gt;</code> –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n"
                 "‚Ä¢ <code>!—Ä–æ–ª—å &lt;—Ñ–∞–º–∏–ª–∏—è&gt;</code> –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                 "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <code>!—Ä–æ–ª—å</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        )
        return

    query = command_parts[1].strip()

    # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    users_by_role = await session.execute(
        select(Users).filter(Users.post.ilike(f"%{query}%"))
    )
    users_list = users_by_role.scalars().all()

    if users_list:
        # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        response_text = f"üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é '{query}':</b>\n\n"
        for user in users_list:
            tg_username = user.tg_username or '‚Äî'
            if tg_username != '‚Äî' and not tg_username.startswith('@'):
                tg_username = '@' + tg_username
            response_text += f"‚Ä¢ {user.fio} ({tg_username})\n"
    else:
        # 2. –ï—Å–ª–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—â–µ–º –ø–æ —Ñ–∞–º–∏–ª–∏–∏
        user_by_name = await session.execute(
            select(Users).filter(Users.fio.ilike(f"%{query}%"))
        )
        user = user_by_name.scalars().first()

        if user:
            response_text = (
                f"üë§ <b>{user.fio}</b>\n"
                f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.post or '‚Äî'}"
            )
        else:
            response_text = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text.startswith("!–∏–Ω—Ñ–∞"))
async def info_command(message: types.Message, session: AsyncSession):
    target_user = None


    if message.reply_to_message:
        reply_user = message.reply_to_message.from_user

        user_result = await session.execute(
            select(Users).filter(Users.tg_id == str(reply_user.id))
        )
        target_user = user_result.scalars().first()

        if not target_user and reply_user.username:
            username = reply_user.username
            if username.startswith('@'):
                username = username[1:]
            user_result = await session.execute(
                select(Users).filter(
                    (Users.tg_username == username) | (Users.tg_username == f"@{username}")
                )
            )
            target_user = user_result.scalars().first()


    else:
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) > 1:
            surname = command_parts[1].strip()
            user_result = await session.execute(
                select(Users).filter(Users.fio.ilike(f"%{surname}%"))
            )
            target_user = user_result.scalars().first()


    if target_user:

        birthday_str = "‚Äî"
        if target_user.birthday:
            try:

                birthday_str = str(target_user.birthday)
                if len(birthday_str) >= 10:
                    birthday_str = birthday_str[:10]

            except Exception:
                pass

        tg_username = target_user.tg_username or '‚Äî'
        if tg_username != '‚Äî' and not tg_username.startswith('@'):
            tg_username = '@' + tg_username

        response_text = (
            f"üë§ <b>{target_user.fio}</b>\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{target_user.phone_number or '‚Äî'}</code>\n"
            f"‚úâÔ∏è <b>Gmail:</b> <code>{target_user.gmail or '‚Äî'}</code>\n"
            f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {target_user.post or '‚Äî'}\n"
            f"üéÇ <b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday_str}\n"
            f"üì∏ <b>Instagram:</b> {target_user.insta or '‚Äî'}\n"
            f"üí¨ <b>Telegram:</b> {tg_username}\n"
            f"üöá <b>–ú–µ—Ç—Ä–æ:</b> {target_user.metro or '‚Äî'}"
        )
    else:
        response_text = (
            "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>!–∏–Ω—Ñ–∞ &lt;—Ñ–∞–º–∏–ª–∏—è&gt;</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text.startswith("!—Ü–∏—Ç–∞—Ç–∞"))
async def quote_command(message: types.Message, session: AsyncSession, bot: Bot):
    if message.reply_to_message and message.reply_to_message.text:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–∏—Ç–∞—Ç–µ
        quote_text = message.reply_to_message.text
        author = message.reply_to_message.from_user
        added_by = message.from_user
        chat_id = message.chat.id
        added_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∞
        photo_path = None
        try:
            user_photos = await bot.get_user_profile_photos(author.id, limit=1)
            if user_photos.total_count > 0:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è
                photo = user_photos.photos[0][-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                file = await bot.get_file(photo.file_id)
                photo_path = f"profile_photos/{author.id}.jpg"
                await bot.download_file(file.file_path, photo_path)
        except Exception as e:
            photo_path = None  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_quote = Quotes(
            author_id=author.id,
            author_username=author.username,
            author_first_name=author.full_name,
            quote_text=quote_text,
            added_by_id=added_by.id,
            added_at=added_at,
            chat_id=chat_id,
            image_path=photo_path
        )
        session.add(new_quote)
        await session.commit()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π
        try:
            template_path = TEMPLATES_DIR / "les.jpg"
            if not template_path.exists():
                return await message.answer("‚ùå –®–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            image = Image.open(template_path).convert("RGB")
            draw = ImageDraw.Draw(image)

            # –®—Ä–∏—Ñ—Ç
            font_path = TEMPLATES_DIR / "Qanelas_ExtraBold.otf"
            if not font_path.exists():
                return await message.answer("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            quote_font = ImageFont.truetype(font_path, 60)
            author_font = ImageFont.truetype(font_path, 30)

            # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_width, image_height = image.size

            # –ê–≤–∞—Ç–∞—Ä–∫–∞ (–≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞)
            avatar_y = 50  # –í—ã—Å–æ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–≤–µ—Ä—Ö—É
            if photo_path and Path(photo_path).is_file():
                avatar = Image.open(photo_path).resize((150, 150)).convert("RGB")

                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∫—Ä—É–∂–∫–∞
                mask = Image.new("L", (150, 150), 0)
                mask_draw = ImageDraw.Draw(mask)
                mask_draw.ellipse((0, 0, 150, 150), fill=255)

                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                avatar_x = (image_width - 150) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                avatar = Image.composite(avatar, Image.new("RGB", (150, 150), (0, 0, 0)), mask)
                image.paste(avatar, (avatar_x, avatar_y), mask)

            # –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
            max_width = image_width - 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (—Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
            wrapped_text = textwrap.wrap(quote_text, width=40)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏

            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            text_y = avatar_y + 150 + 50  # –ü–æ–¥ –∞–≤–∞—Ç–∞—Ä–∫–æ–π —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
            for line in wrapped_text:
                text_bbox = draw.textbbox((0, 0), line, font=quote_font)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º textbbox
                text_width = text_bbox[2] - text_bbox[0]
                text_height = text_bbox[3] - text_bbox[1]
                text_x = (image_width - text_width) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                draw.text((text_x, text_y), line, font=quote_font, fill="white")
                text_y += text_height + 10  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

            # –ü–æ–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∞
            author_text = f"‚Äî {author.full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}"
            author_bbox = draw.textbbox((0, 0), author_text, font=author_font)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º textbbox
            author_width = author_bbox[2] - author_bbox[0]
            author_height = author_bbox[3] - author_bbox[1]
            author_x = (image_width - author_width) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            author_y = image_height - author_height - 50  # –ü–æ—á—Ç–∏ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            draw.text((author_x, author_y), author_text, font=author_font, fill="white")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            buf = BytesIO()
            image.save(buf, "JPEG")
            buf.seek(0)
            await message.answer_photo(
                BufferedInputFile(buf.getvalue(), filename="quote.jpg"),
                caption="–ï—â—ë –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –ø–æ–π–º–∞–Ω–∞"
            )

        except Exception as e:
            traceback.print_exc()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–∏—Ç–∞—Ç–æ–π.")
    else:
        await message.answer(text="–ß—Ç–æ–±—ã –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å —Ü–∏—Ç–∞—Ç—É, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ü–∏—Ç–∞—Ç—É.")


@group_router.message(F.text == "!–º—É–¥—Ä–æ—Å—Ç—å")
async def wisdom_command(message: types.Message, session: AsyncSession):
    try:
        # 1. –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        result = await session.execute(
            select(Quotes).order_by(func.random()).limit(1)
        )
        quote: Quotes | None = result.scalars().first()
        if quote is None:
            return await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ü–∏—Ç–∞—Ç.")

        # 2. –®–∞–±–ª–æ–Ω
        template_path = TEMPLATES_DIR / "les.jpg"
        if not template_path.exists():
            return await message.answer("‚ùå –®–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        image = Image.open(template_path).convert("RGB")
        draw = ImageDraw.Draw(image)

        # 3. –®—Ä–∏—Ñ—Ç
        font_path = TEMPLATES_DIR / "Qanelas_ExtraBold.otf"
        if not font_path.exists():
            return await message.answer("‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        quote_font = ImageFont.truetype(font_path, 60)
        author_font = ImageFont.truetype(font_path, 30)

        # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_width, image_height = image.size

        # 4. –ê–≤–∞—Ç–∞—Ä–∫–∞ (–≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞)
        avatar_y = 50  # –í—ã—Å–æ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–≤–µ—Ä—Ö—É
        if quote.image_path and Path(quote.image_path).is_file():
            avatar = Image.open(quote.image_path).resize((150, 150)).convert("RGB")

            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∫—Ä—É–∂–∫–∞
            mask = Image.new("L", (150, 150), 0)
            mask_draw = ImageDraw.Draw(mask)
            mask_draw.ellipse((0, 0, 150, 150), fill=255)

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            avatar_x = (image_width - 150) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            avatar = Image.composite(avatar, Image.new("RGB", (150, 150), (0, 0, 0)), mask)
            image.paste(avatar, (avatar_x, avatar_y), mask)

        # 5. –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
        quote_text = quote.quote_text
        max_width = image_width - 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (—Å –æ—Ç—Å—Ç—É–ø–∞–º–∏)
        wrapped_text = textwrap.wrap(quote_text, width=40)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        text_y = avatar_y + 150 + 50  # –ü–æ–¥ –∞–≤–∞—Ç–∞—Ä–∫–æ–π —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        for line in wrapped_text:
            text_bbox = draw.textbbox((0, 0), line, font=quote_font)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º textbbox
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            text_x = (image_width - text_width) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            draw.text((text_x, text_y), line, font=quote_font, fill="white")
            text_y += text_height + 10  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

        # 6. –ü–æ–¥–ø–∏—Å—å –∞–≤—Ç–æ—Ä–∞
        author_text = f"‚Äî {quote.author_first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}"
        author_bbox = draw.textbbox((0, 0), author_text, font=author_font)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º textbbox
        author_width = author_bbox[2] - author_bbox[0]
        author_height = author_bbox[3] - author_bbox[1]
        author_x = (image_width - author_width) // 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        author_y = image_height - author_height - 50  # –ü–æ—á—Ç–∏ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        draw.text((author_x, author_y), author_text, font=author_font, fill="white")

        # 7. –û—Ç–ø—Ä–∞–≤–∫–∞
        buf = BytesIO()
        image.save(buf, "JPEG")
        buf.seek(0)
        await message.answer_photo(
            BufferedInputFile(buf.getvalue(), filename="quote.jpg"),
            caption="–ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è"
        )

    except Exception:
        traceback.print_exc()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–¥—Ä–æ—Å—Ç–∏.")
        

@group_router.message(F.text.startswith("!—Ä–∏–Ω–≥"))
async def ring_command(message: types.Message, session: AsyncSession):
    bot_creator_username = "yanejettt"

    if not message.reply_to_message:
        await message.answer(
            text="‚ùå –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —Ä–∏–Ω–≥, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑–∏—Ç—å—Å—è."
        )
        return

    challenger = message.from_user
    opponent = message.reply_to_message.from_user

    # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
    if opponent.username == bot_creator_username:
        await message.answer(
            text="–ü—Ä–∞–≤–¥–∞ –¥—É–º–∞–µ—à—å, —á—Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–µ—à—å?"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–º—å—é—á–µ–Ω –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π
    mute_check = await session.execute(
        select(Mutes).filter(
            Mutes.user_id == challenger.id,
            Mutes.is_active == True
        )
    )
    if mute_check.scalars().first():
        await message.answer("‚ùå –¢—ã –≤ –º—É—Ç–µ, –∫–∞–∫–æ–π —Ä–∏–Ω–≥?")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç—Ä–∏–≥—É
    fight_msg = await message.answer(
        f"‚öîÔ∏è <b>{challenger.full_name}</b> –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∏–Ω–≥ <b>{opponent.full_name}</b>!",
        parse_mode="HTML"
    )
    
    await asyncio.sleep(2)
    await message.answer(text=random.choice(["üí• –ë–£–ú –ù–ê–•–£–ô!", "üí• –ò–∏–∏–∏–∏–∏–∏—É—É—É"]))
    await asyncio.sleep(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if challenger.username == bot_creator_username:
        winner = challenger
        loser = opponent
    elif opponent.username == bot_creator_username:
        winner = opponent
        loser = challenger
    else:
        winner = random.choice([challenger, opponent])
        loser = opponent if winner == challenger else challenger

    # –°–æ–∑–¥–∞–µ–º –º—å—é—Ç –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    mute_end = datetime.now() + timedelta(minutes=10)
    new_mute = Mutes(
        user_id=loser.id,
        chat_id=message.chat.id,
        username=loser.username or "No username",
        first_name=loser.full_name,
        mute_start=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        mute_end=mute_end.strftime("%Y-%m-%d %H:%M:%S"),
        reason="–ü—Ä–æ–∏–≥—Ä–∞–ª –Ω–∞ —Ä–∏–Ω–≥–µ",
        is_active=True
    )
    session.add(new_mute)
    await session.commit()


    try:
        await message.chat.restrict(
            user_id=loser.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=mute_end
        )
        
        final_message = (
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner.full_name}</b>!\n"
            f"üíÄ <b>{loser.full_name}</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç!"
        )
        
        await message.answer(text=final_message, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—å—é—Ç–∏—Ç—å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
        )
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        await session.rollback()


@group_router.message(F.text == "!–∞–Ω–º—É—Ç")
async def unban_command(message: types.Message, session: AsyncSession):
    muted_users_result = await session.execute(
        select(Mutes).filter(
            Mutes.is_active == True,
            Mutes.chat_id == message.chat.id
        )
    )
    muted_users = muted_users_result.scalars().all()

    if not muted_users:
        await message.answer("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ.")
        return

    count = 0
    for mute in muted_users:
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            await message.chat.restrict(
                user_id=mute.user_id,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            mute.is_active = False  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º—É—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            count += 1
        except Exception as e:
            continue  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

    await session.commit()
    await message.answer(f"üîì –†–∞–∑–º—å—é—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")


@group_router.message(F.text == "!—Ä—É–ª–µ—Ç–∫–∞")
async def roulette_command(message: types.Message, session: AsyncSession):
    special_username = "smaginnd"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
    is_special_user = message.from_user.username == special_username

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    if random.randint(1, 6) == 1:
        mute_end = datetime.now() + timedelta(minutes=10)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º—É—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        new_mute = Mutes(
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            username=message.from_user.username or "–ë–µ–∑ username",
            first_name=message.from_user.full_name,
            mute_start=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            mute_end=mute_end.strftime("%Y-%m-%d %H:%M:%S"),
            reason="–ü—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫–µ",
            is_active=True
        )
        session.add(new_mute)
        await session.commit()

        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.chat.restrict(
                user_id=message.from_user.id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=mute_end
            )
            if is_special_user:
                response_text = (
                    f"üéØ –ù–∏–∫–∏—Ç, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —Å—É–¥—å–±–∞ –∑–ª–æ–¥–µ–π–∫–∞ –∑–∞–º—å—é—Ç–∏–ª–∞ —Ç–µ–±—è –Ω–∞ 10 –º–∏–Ω—É—Ç."
                )
            else:
                response_text = (
                    f"üéØ @{message.from_user.username or message.from_user.full_name}, —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –±—Ä–∞—Ç. "
                    f"–¢—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç."
                )
        except Exception as e:
            await session.rollback()
            response_text = (
                f"‚ö†Ô∏è @{message.from_user.username or message.from_user.full_name}, —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –±—Ä–∞—Ç, "
                f"–Ω–æ –±–æ—Ç –Ω–µ —Å–º–æ–≥ —Ç–µ–±—è –∑–∞–º—å—é—Ç–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
            )
    else:
        if is_special_user:
            response_text = "üéâ –ù–∏–∫–∏—Ç, –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –ø—Ä–æ–Ω–µ—Å–ª–æ."
        else:
            response_text = (
                f"üéâ @{message.from_user.username or message.from_user.full_name}, —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, –±—Ä–∞—Ç! –í —ç—Ç–æ—Ç —Ä–∞–∑ –æ–±–æ—à–ª–æ—Å—å."
            )

    await message.answer(text=response_text)


@group_router.message(F.text == "!–∫–ª–∞–¥–±–∏—â–µ")
async def graveyard_command(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –º—É—Ç–æ–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    muted_users_result = await session.execute(
        select(Mutes).filter(
            Mutes.is_active == True,
            Mutes.chat_id == message.chat.id
        )
    )
    muted_users = muted_users_result.scalars().all()

    if muted_users:
        response_text = "üíÄ <b>–°–ø–∏—Å–æ–∫ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ:</b>\n\n"
        for mute in muted_users:
            username = mute.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            response_text += f"‚Ä¢ {mute.first_name} (@{username}) ‚Äî –¥–æ {mute.mute_end}\n"
    else:
        response_text = "‚úÖ –í —á–∞—Ç–µ –Ω–µ—Ç –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text.startswith("!–∫—Ç–æ"))
async def who_command(message: types.Message, session: AsyncSession):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: !–∫—Ç–æ —Å–∞–º—ã–π —É–º–Ω—ã–π")
        return

    text_query = command_parts[1].strip()
    
    # Fetch all users from the database
    users = await session.execute(select(Users))
    users_list = users.scalars().all()

    if users_list:
        import random
        # For a simple implementation, pick a random user
        # A more complex implementation would involve NLP and similarity matching
        random_user = random.choice(users_list)
        response_text = f"–Ø –¥—É–º–∞—é, —á—Ç–æ \"{text_query}\" –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {random_user.tg_username} ({random_user.fio})."
    else:
        response_text = "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –≤ –±–¥ –Ω–∏—Ö—É—è –Ω–µ—Ç."

    await message.answer(text=response_text)


@group_router.message(F.text.startswith("!–∫–æ–≥–¥–∞"))
async def when_command(message: types.Message):
    # –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è
    event_date = datetime(2025, 8, 8, 0, 0, 0)
    now = datetime.now()

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    time_difference = event_date - now

    if time_difference.total_seconds() > 0:
        days_left = time_difference.days
        hours_left = time_difference.seconds // 3600
        minutes_left = (time_difference.seconds % 3600) // 60

        response_text = (
            f"–î–æ –≤—Å–ø—ã—à–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å:\n"
            f"üóì {days_left} –¥–Ω–µ–π, {hours_left} —á–∞—Å–æ–≤ –∏ {minutes_left} –º–∏–Ω—É—Ç."
        )
    else:
        response_text = "–í—Å–ø—ã—à–∫–∞ —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞!"

    await message.answer(text=response_text)


@group_router.message(F.text.startswith("!–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"))
async def probability_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ. –ü—Ä–∏–º–µ—Ä: !–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ø–æ–π–¥–µ—Ç –¥–æ–∂–¥—å")
        return

    event_query = command_parts[1].strip()
    import random
    probability = random.randint(0, 100)
    response_text = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {event_query} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probability}%."
    await message.answer(text=response_text)


@group_router.message(F.text.startswith("!—Ä–∞–∑–±—É–¥–∏—Ç—å"))
async def wake_up_command(message: types.Message, session: AsyncSession, bot: Bot, scheduler: AsyncIOScheduler):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: !—Ä–∞–∑–±—É–¥–∏—Ç—å YYYY-MM-DD HH:MM:SS")
        return

    datetime_str = command_parts[1].strip()
    try:
        wake_up_time = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        await message.answer(text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM:SS.")
        return


    wake_up_time = wake_up_time + timedelta(hours=3)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–æ —Ä–∞–∑–±—É–¥–∏—Ç—å
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        target_user = message.from_user

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users –ø–æ tg_username
    user_result = await session.execute(
        select(Users).filter(Users.tg_username == target_user.username)
    )
    user = user_result.scalars().first()
    phone_number = user.phone_number if user else "‚Äî"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–±—É–¥—è—à–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_wake_up = WakeUps(
        user_id=target_user.id,
        username=target_user.username or "–ë–µ–∑ username",
        first_name=target_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏",
        wake_up_time=wake_up_time,
        chat_id=message.chat.id
    )
    session.add(new_wake_up)
    await session.commit()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    response_text = (
        f"‚úÖ –†–∞–∑–±—É–¥—è—à–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è @{target_user.username or target_user.first_name} "
        f"–Ω–∞ {wake_up_time.strftime('%Y-%m-%d %H:%M:%S')}.\n"
    )
    await message.answer(text=response_text, parse_mode="HTML")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ aioscheduler
    async def send_wake_up_message(bot: Bot, chat_id: int, username: str, first_name: str, phone_number: str):
        await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ @{username or first_name}, –ø–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å!\n\n"
                 f"üì± –ù–∞–∫–ª–∏–∫–∞–π—Ç–µ –µ–º—É –ø–æ —ç—Ç–∏–º —Ü–∏—Ñ—Ä–∞–º –ø–æ-–±—Ä–∞—Ç—Å–∫–∏: <code>{phone_number}</code>",
            parse_mode="HTML"
        )

    scheduler.add_job(
        send_wake_up_message,
        trigger=DateTrigger(run_date=wake_up_time),
        kwargs={
            "bot": bot,
            "chat_id": message.chat.id,
            "username": target_user.username or "–ë–µ–∑ username",
            "first_name": target_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏",
            "phone_number": phone_number
        }
    )


@group_router.message(F.text.startswith("!–Ω–µ –±—É–¥–∏—Ç—å"))
async def do_not_wake_up_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: !–Ω–µ –±—É–¥–∏—Ç—å YYYY-MM-DD HH:MM:SS")
        return

    datetime_str = command_parts[1].strip()
    # In a real application, you would cancel the scheduled task.
    # For now, we just acknowledge the request.
    response_text = f"–†–∞–∑–±—É–¥—è—à–∫–∞ –Ω–∞ {datetime_str} –æ—Ç–º–µ–Ω–µ–Ω–∞."
    await message.answer(text=response_text)


@group_router.message(F.text == "!—Ä–∞–∑–±—É–¥—è—à–∫–∏")
async def wake_up_list_command(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–±—É–¥—è—à–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    wakeups_result = await session.execute(
        select(WakeUps).filter(WakeUps.chat_id == message.chat.id)
    )
    wakeups_list = wakeups_result.scalars().all()

    if wakeups_list:
        response_text = "üìÖ <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±—É–¥—è—à–µ–∫:</b>\n\n"
        for wakeup in wakeups_list:
            username = wakeup.username or "–ë–µ–∑ username"
            wake_up_time = wakeup.wake_up_time.strftime("%Y-%m-%d %H:%M:%S")
            response_text += f"‚Ä¢ @{username} ‚Äî {wake_up_time}\n"
    else:
        response_text = "‚úÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±—É–¥—è—à–µ–∫."

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text.startswith("!v"))
async def check_version(message: types.message):
    await message.answer(text='Ver.1.0.12')


@group_router.message(F.text == "!–æ—Ä–≥ –¥–Ω—è")
async def org_day_command(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Users
    users_result = await session.execute(select(Users))
    users_list = users_result.scalars().all()

    if not users_list:
        await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    import random
    random_user = random.choice(users_list)
    fio = random_user.fio or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    tg_username = random_user.tg_username or "–ë–µ–∑ username"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = f"üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–Ω—è –í—Å–ø—ã—à–∫–∏: <b>{fio}</b> (@{tg_username})"
    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text == "!–ø–æ–¥—Å–∫–∞–∂–∏")
async def suggest_command(message: types.Message):
    suggestions = [
        "–ó–∞–±–µ–π —Ö—É–π, –±—Ä–∞—Ç",
        "–°–ø—Ä–æ—Å–∏ —É –¥—Ä—É–≥–∞, –±—Ä–∞—Ç",
        "–ü–æ–¥—É–º–∞–π –µ—â–µ —Ä–∞–∑–± –±—Ä–∞—Ç",
        "–î–æ–≤–µ—Ä—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏, –±—Ä–∞—Ç",
        "–°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –≤–µ—Ä–Ω–∏—Å—å –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ, –±—Ä–∞—Ç",
        "–°–∫–æ—Ä–æ V—Å–ø—ã—à–∫–∞ - —ç—Ç–æ Z–∞–µ–±–∏—Å—å",
        "–ï—Å—Ç—å –∫–∏—Ç–∫–∞—Ç, –Ω–æ –Ω–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞("
    ]
    import random
    response_text = random.choice(suggestions)
    await message.answer(text=f"{response_text}")


@group_router.message(F.text == "!–∂—ã–∑–Ω—å")
async def life_command(message: types.Message, session: AsyncSession):
    target_user = None

    if message.reply_to_message:
        reply_username = message.reply_to_message.from_user.username
        if reply_username and reply_username.startswith('@'):
            reply_username = reply_username[1:]
        user_result = await session.execute(
            select(Users).filter(
                (Users.tg_username == reply_username) | 
                (Users.tg_username == f"@{reply_username}")
            )
        )
        target_user = user_result.scalars().first()
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É
        sender_username = message.from_user.username
        if sender_username and sender_username.startswith('@'):
            sender_username = sender_username[1:]
        user_result = await session.execute(
            select(Users).filter(
                (Users.tg_username == sender_username) | 
                (Users.tg_username == f"@{sender_username}")
            )
        )
        target_user = user_result.scalars().first()

    if target_user and target_user.birthday:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM:SS"
            birthday = datetime.strptime(target_user.birthday, "%Y-%m-%d %H:%M:%S")
            now = datetime.now()

            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç, –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥
            years = now.year - birthday.year - ((now.month, now.day) < (birthday.month, birthday.day))
            total_seconds = int((now - birthday).total_seconds())
            total_minutes = total_seconds // 60

            response_text = (
                f"üë§ <b>{target_user.fio}</b>\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday.strftime('%d.%m.%Y')}\n"
                f"üéâ <b>–ü–æ–ª–Ω—ã—Ö –ª–µ—Ç:</b> {years}\n"
                f"‚è≥ <b>–ü—Ä–æ–∂–∏—Ç—ã—Ö –º–∏–Ω—É—Ç:</b> {total_minutes}\n"
                f"‚è≥ <b>–ü—Ä–æ–∂–∏—Ç—ã—Ö —Å–µ–∫—É–Ω–¥:</b> {total_seconds}"
            )
        except ValueError:
            response_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    else:
        response_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text == "!–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç")
async def compliment_command(message: types.Message):
    compliments = [
        "–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—à—å –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!",
        "–¢–≤–æ—è —É–ª—ã–±–∫–∞ –æ–∑–∞—Ä—è–µ—Ç –∫–æ–º–Ω–∞—Ç—É.",
        "–¢—ã –æ—á–µ–Ω—å —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫.",
        "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—â–∞—Ç—å—Å—è.",
        "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä –ª—É—á—à–µ.",
        "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–æ–±—Ä—ã–π —á–µ–ª–æ–≤–µ–∫.",
        "–¢–≤–æ–∏ –∏–¥–µ–∏ –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç.",
        "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ª–∏–¥–µ—Ä.",
        "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∑–∞—Ä—è–∂–∞–µ—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.",
        "–¢—ã —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É.",
        "–¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞.",
        "–¢–≤–æ—è —Ö–∞—Ä–∏–∑–º–∞ –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –ª—é–¥–µ–π.",
        "–¢—ã –æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ —É–º–Ω—ã–π.",
        "–¢–≤–æ—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.",
        "–¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥—Ä—É–≥.",
        "–¢—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º.",
        "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü.",
        "–¢—ã –≤—Å–µ–≥–¥–∞ –≤—ã–≥–ª—è–¥–∏—à—å —Å—Ç–∏–ª—å–Ω–æ.",
        "–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ —Å–≤–æ–µ–º –¥–µ–ª–µ.",
        "–¢—ã —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—é—Ç –≤–æ–∫—Ä—É–≥ —Å–µ–±—è."
    ]
    import random
    response_text = random.choice(compliments)
    await message.answer(text=f"–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞: {response_text}")


@group_router.message(F.text.in_([
    '!—É–µ–±–∞—Ç—å', '!–æ–±–Ω—è—Ç—å', '!—Å–µ–∫—Å', '!–ø–æ–∂–∞—Ç—å —Ä—É–∫—É', '!–ø–æ–≥–ª–∞–¥–∏—Ç—å', 
    '!–æ—Ç–¥–∞—Ç—å', '!–≤–∞—Ö—Ç–∞', '!–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è', '!–≤—ã–ø–∏—Ç—å', '!–∫—É–ø–∞—Ç—å—Å—è', 
    '!–±—Ä—ã–∑–≥–∞—Ç—å—Å—è', '!–Ω–∞—à–∞ —Ä–∞—à–∞'
]))
async def interactive_commands(message: types.Message, session: AsyncSession):
    command_text = message.text.lstrip('!')
    sender_username = message.from_user.full_name

    if message.reply_to_message:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_username = message.reply_to_message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # Fetch entertainment data from the database
        entertainment = await session.execute(
            select(Entertainments).filter(Entertainments.name_ent == command_text)
        )
        entertainment = entertainment.scalars().first()

        if entertainment:
            response_text = f"@{target_username}, —Ç–µ–±—è {entertainment.declension} (–æ—Ç {sender_username})"
        else:
            action_map = {
                '—É–µ–±–∞—Ç—å': '—É–µ–±–∞–ª–∏',
                '–æ–±–Ω—è—Ç—å': '–æ–±–Ω—è–ª–∏',
                '—Å–µ–∫—Å': '–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º —Å',
                '–ø–æ–∂–∞—Ç—å —Ä—É–∫—É': '–ø–æ–∂–∞–ª–∏ —Ä—É–∫—É',
                '–ø–æ–≥–ª–∞–¥–∏—Ç—å': '–ø–æ–≥–ª–∞–¥–∏–ª–∏',
                '–≤–∞—Ö—Ç–∞': '–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–∞—Ö—Ç—É',
                '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è': '—Ä–∞–∑–±—É–¥–∏–ª–∏',
                '–≤—ã–ø–∏—Ç—å': '—Ç–µ–±—è –Ω–∞–±—É—Ö–∞–ª–∏',
                '–∫—É–ø–∞—Ç—å—Å—è': '–∏—Å–∫—É–ø–∞–ª–∏',
                '–±—Ä—ã–∑–≥–∞—Ç—å—Å—è': '–æ–±—Ä—ã–∑–≥–∞–ª–∏',
                '–Ω–∞—à–∞ —Ä–∞—à–∞': '–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ù–∞—à—É –†–∞—à—É —Å',
                '—É–≥–æ—Å—Ç–∏—Ç—å': '—É–≥–æ—Å—Ç–∏–ª –ø–∏–≤–æ–º'
            }
            declension = action_map.get(command_text, command_text)
            response_text = f"{target_username}, —Ç–µ–±—è {declension}\n\n{sender_username}"
        
        await message.answer(text=response_text)
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        users_result = await session.execute(select(Users))
        users_list = users_result.scalars().all()

        if not users_list:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import random
        random_user = random.choice(users_list)
        target_username = random_user.tg_username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # Fetch entertainment data from the database
        entertainment = await session.execute(
            select(Entertainments).filter(Entertainments.name_ent == command_text)
        )
        entertainment = entertainment.scalars().first()

        if entertainment:
            response_text = f"{target_username}, —Ç–µ–±—è {entertainment.declension} {sender_username}"
        else:
            # Fallback if not found in DB
            action_map = {
                '—É–µ–±–∞—Ç—å': '—É–µ–±–∞–ª–∏',
                '–æ–±–Ω—è—Ç—å': '–æ–±–Ω—è–ª–∏',
                '—Å–µ–∫—Å': '–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–∫—Å–æ–º —Å',
                '–ø–æ–∂–∞—Ç—å —Ä—É–∫—É': '–ø–æ–∂–∞–ª–∏ —Ä—É–∫—É',
                '–ø–æ–≥–ª–∞–¥–∏—Ç—å': '–ø–æ–≥–ª–∞–¥–∏–ª–∏',
                '–≤–∞—Ö—Ç–∞': '–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ –≤–∞—Ö—Ç—É',
                '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è': '—Ä–∞–∑–±—É–¥–∏–ª–∏',
                '–≤—ã–ø–∏—Ç—å': '—Ç–µ–±—è –Ω–∞–±—É—Ö–∞–ª–∏',
                '–∫—É–ø–∞—Ç—å—Å—è': '–∏—Å–∫—É–ø–∞–ª–∏',
                '–±—Ä—ã–∑–≥–∞—Ç—å—Å—è': '–æ–±—Ä—ã–∑–≥–∞–ª–∏',
                '–Ω–∞—à–∞ —Ä–∞—à–∞': '–ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ù–∞—à—É –†–∞—à—É —Å',
                '—É–≥–æ—Å—Ç–∏—Ç—å': '—É–≥–æ—Å—Ç–∏–ª –ø–∏–≤–æ–º'
            }
            declension = action_map.get(command_text, command_text)
            response_text = f"{target_username},—Ç–µ–±—è {declension} (–æ—Ç {sender_username})"
        
        await message.answer(text=response_text)


@group_router.message(F.text.startswith("!–Ω–∞—Ö—É–π"))
async def nahuy_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –ø–æ—Å–ª–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: !–Ω–∞—Ö—É–π —Ä–∞–±–æ—Ç—É")
        return
    
    target = command_parts[1].strip()
    response_text = f"–ü–æ—à–µ–ª –Ω–∞—Ö—É–π {target}!"
    await message.answer(text=response_text)


@group_router.message(F.text.startswith("!–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"))
async def dolbaeb_check(message: types.Message):
    await message.answer('–ë–ª—è, —Ç—ã —Å–µ—Ä—å—ë–∑–Ω–æ —â–∞ ?')


@group_router.message(F.text.startswith("!–Ω–∞–ª–∏—Ç—å –ø–∏–≤–æ"))
async def pour_beer_command(message: types.Message, session: AsyncSession):
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    command_parts = message.text.strip().split(maxsplit=2)
    target_user = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –Ω–∞–ª–∏—Ç—å –ø–∏–≤–æ
    if message.reply_to_message:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_user = message.reply_to_message.from_user
    elif len(command_parts) > 2:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username
        username = command_parts[2].strip().lstrip('@')
        user_result = await session.execute(
            select(Users).filter(
                (Users.tg_username == username) | (Users.tg_username == f"@{username}")
            )
        )
        target_user = user_result.scalars().first()
    else:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ, –∫–æ–º—É –Ω–∞–ª–∏—Ç—å –ø–∏–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username.")
        return

    if not target_user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    beer_stat = await session.execute(
        select(BeerStats).filter(BeerStats.user_id == target_user.id)
    )
    beer_stat = beer_stat.scalars().first()

    if beer_stat:
        beer_stat.beer_count += 1
        beer_stat.last_poured = datetime.now()
    else:
        beer_stat = BeerStats(
            user_id=target_user.id,
            username=target_user.tg_username or "–ë–µ–∑ username",
            first_name=target_user.fio or "–ë–µ–∑ –∏–º–µ–Ω–∏",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            beer_count=1,
            last_poured=datetime.now()
        )
        session.add(beer_stat)

    await session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = (
        f"üç∫ –ù–∞–ª–∏—Ç–æ –ø–∏–≤–æ –¥–ª—è @{target_user.tg_username or target_user.fio}.\n"
        f"–í—Å–µ–≥–æ –∫—Ä—É–∂–µ–∫: {beer_stat.beer_count}."
    )
    await message.answer(text=response_text)


@group_router.message(F.text == "!—Ç–æ–ø –ø–∏–≤–∞")
async def beer_top_command(message: types.Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–∏—Ç–æ–≥–æ –ø–∏–≤–∞
    beer_stats_result = await session.execute(
        select(BeerStats)
        .order_by(BeerStats.beer_count.desc())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∏–≤–∞ (—É–±—ã–≤–∞–Ω–∏–µ)
        .limit(10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∑–∞–ø–∏—Å–µ–π
    )
    top_users = beer_stats_result.scalars().all()

    if not top_users:
        await message.answer("‚ùå –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø–∏–ª –ø–∏–≤–æ. –ß—Ç–æ –∑–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å?")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = "üç∫ <b>–¢–æ–ø-10 –ª—é–±–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞:</b>\n\n"
    for idx, user in enumerate(top_users, start=1):
        username = f"@{user.username}" if user.username else user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        response_text += f"{idx}. {username} ‚Äî {user.beer_count} –∫—Ä—É–∂–µ–∫\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
    if top_users[0].username == "eqleeq":
        response_text += "\n‚úÖ –í—Å—ë –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö. –ê—Ä—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ!"
    else:
        response_text += "\n‚ùì–ü–æ—á–µ–º—É –Ω–µ –ê—Ä—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ? –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ..."

    await message.answer(text=response_text, parse_mode="HTML")


@group_router.message(F.text.contains("–±—Ä–∞—Ç"))
async def brother_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ "–±—Ä–∞—Ç" —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º
    import re
    if re.search(r"\b–±—Ä–∞—Ç\b|\b–ë—Ä–∞—Ç\b", message.text):
        response_text = "–æ–ø–∞ –±—Ä–∞—Ç—Å–∫–∏–π –±—Ä–∞—Ç"
        await message.answer(text=response_text)


@group_router.message(F.text.contains("—Å–µ–º—å—è" or "—Å–µ–º—å–∏"))
async def family_command(message: types.Message):

    if re.search(r"\b—Å–µ–º—å—è\b|\b—Å–µ–º—å–∏\b|\b—Å–µ–º–µ–π–Ω—ã–µ\b|\b—Å–µ–º–µ–π–Ω—ã–π\b", message.text):
        try:
           
            image_path = TEMPLATES_DIR / "dominik.jpg" 
            if not image_path.exists():
                await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return


            await message.answer_photo(
                BufferedInputFile(image_path.read_bytes(), filename="dominik.jpg"),
            )

        except Exception as e:
            traceback.print_exc()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


@group_router.message(F.text == '!–∫—Ç–æ –∂–æ–∫–µ—Ä')
async def jokker_command(message: types.Message):
    await message.answer(text='–ë—ã–ª –≤—á–µ—Ä–∞, –µ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ - –ê—Ä—Å, –≤–æ–ø—Ä–æ—Å—ã ?')



@group_router.message(F.text.startswith("!–¥–∏–∫–ø–∏–∫"))
async def deepseek_command(message: types.Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: !–¥–∏–∫–ø–∏–∫ –ö–∞–∫ –¥–µ–ª–∞?")
        return

    question = command_parts[1].strip()

    try:
        
        response = chat_stream(question)
        if response:
            await message.answer(text=response)
        else:
            await message.answer(text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek.")
    except Exception as e:
        await message.answer(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        traceback.print_exc()


@group_router.message(F.text.startswith("!–æ–±–æ—Å–Ω–æ–≤–∞—Ç—å"))
async def get_reason(message: types.Message):
    if message.reply_to_message:
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
        await message.reply_to_message.reply(text="–∞ —Ç–µ–±—è —ç—Ç–æ –µ–±–∞—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ.")
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text="‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !–æ–±–æ—Å–Ω–æ–≤–∞—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@group_router.message(F.text.startswith("!–∞–¥—Ä–µ—Å"))
async def address_command(message: types.Message, session: AsyncSession):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer(text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å. –ü—Ä–∏–º–µ—Ä: !–∞–¥—Ä–µ—Å –Ø—Å–Ω—ã–π –ø—Ä–æ–µ–∑–¥ 18")
        return

    address = command_parts[1].strip()
    full_address = f"–≥. –ú–æ—Å–∫–≤–∞, {address}"  # –î–æ–±–∞–≤–ª—è–µ–º "–≥. –ú–æ—Å–∫–≤–∞" –∫ –∑–∞–ø—Ä–æ—Å—É

    try:
        
        YANDEX_API_KEY = os.getenv('YANDEX_API_KEY') 
        YANDEX_GEOCODER_URL = "https://geocode-maps.yandex.ru/1.x/"
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": full_address,
            "format": "json"
        }
        response = requests.get(YANDEX_GEOCODER_URL, params=params)
        response_data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if "response" not in response_data or "GeoObjectCollection" not in response_data["response"]:
            await message.answer(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.")
            return

        if not response_data["response"]["GeoObjectCollection"]["featureMember"]:
            await message.answer(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        geo_object = response_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
        coordinates = geo_object["Point"]["pos"].split()
        longitude, latitude = map(float, coordinates)

       
        users_result = await session.execute(select(Users).filter(Users.metro.isnot(None)))
        users_list = users_result.scalars().all()

        if not users_list:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Ç—Ä–æ.")
            return

        
        def calculate_distance(user_metro):
            metro_coords = metro_coordinates.get(user_metro)
            if metro_coords:
                return geodesic((latitude, longitude), metro_coords).kilometers
            return float('inf')  

        user_distances = [
            (user, calculate_distance(user.metro)) for user in users_list
        ]
        user_distances = [ud for ud in user_distances if ud[1] != float('inf')] 
        user_distances.sort(key=lambda x: x[1])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–ø-3 –±–ª–∏–∂–∞–π—à–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        response_text = "üìç <b>–¢–æ–ø-3 –±–ª–∏–∂–∞–π—à–∏—Ö –ª—é–¥–µ–π:</b>\n\n"
        for idx, (user, distance) in enumerate(user_distances[:3], start=1):
            tg_username = user.tg_username or "–ë–µ–∑ username"
            response_text += f"{idx}. {user.fio or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({tg_username}) ‚Äî {distance:.2f} –∫–º\n"

        await message.answer(text=response_text, parse_mode="HTML")

    except Exception as e:
        traceback.print_exc()
        await message.answer(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


@group_router.message(Command("create"))
async def start_poll_creation(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø.
    """
    if message.from_user.id not in ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:")
    await state.set_state(PollCreation.waiting_for_question)


@group_router.message(PollCreation.waiting_for_question)
async def set_poll_question(message: types.Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞.
    """
    await state.update_data(question=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –≤ –æ–ø—Ä–æ—Å–µ?")
    await state.set_state(PollCreation.waiting_for_option_count)


@group_router.message(PollCreation.waiting_for_option_count)
async def set_option_count(message: types.Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.
    """
    try:
        option_count = int(message.text)
        if option_count < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.")
            return

        await state.update_data(option_count=option_count, options=[])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:")
        await state.set_state(PollCreation.waiting_for_options)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@group_router.message(PollCreation.waiting_for_options)
async def collect_options(message: types.Message, state: FSMContext):
    """
    –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.
    """
    data = await state.get_data()
    options = data.get("options", [])
    option_count = data["option_count"]

    options.append(message.text)
    await state.update_data(options=options)

    if len(options) < option_count:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ({len(options) + 1}/{option_count}):")
    else:
        # –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–±—Ä–∞–Ω—ã
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û–¥–∏–Ω –≤—ã–±–æ—Ä")],
                [KeyboardButton(text="–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")]
            ],
            resize_keyboard=True
        )

        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–ø—Ä–æ—Å–∞:", reply_markup=keyboard)
        await state.set_state(PollCreation.waiting_for_poll_type)

@group_router.message(PollCreation.waiting_for_poll_type)
async def set_poll_type(message: types.Message, state: FSMContext, bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É.
    """
    poll_type = message.text.lower()
    if poll_type not in {"–æ–¥–∏–Ω –≤—ã–±–æ—Ä", "–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"}:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–û–¥–∏–Ω –≤—ã–±–æ—Ä' –∏–ª–∏ '–ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'.")
        return

    is_multiple_choice = poll_type == "–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    question = data["question"]
    options = data["options"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É
    await bot.send_poll(
        chat_id=TARGET_GROUP_ID,
        question=question,
        options=options,
        is_anonymous=False,
        allows_multiple_answers=is_multiple_choice,
    )

    await message.answer("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

@group_router.message(Command("check"))
async def check_non_voters(message: types.Message, session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–ø—Ä–æ—Å–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
    polls_result = await session.execute(
        select(Events).filter(Events.type == "poll").order_by(Events.created_at.desc())
    )
    last_poll = polls_result.scalars().first()

    if not last_poll:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    poll_result = await session.execute(
        select(Mutes).filter(Mutes.event_id == last_poll.id)  # –ü—Ä–∏–º–µ—Ä: —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤
    )
    voted_users = {vote.user_id for vote in poll_result.scalars().all()}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users_result = await session.execute(select(Users))
    users_list = users_result.scalars().all()

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    non_voters = [user for user in users_list if int(user.tg_id) not in voted_users]

    if non_voters:
        response_text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫–æ–º—É –¥–∞—Ç—å –ø–∏–∑–¥—ã\n\n"
        for user in non_voters:
            response_text += f"‚Ä¢ {user.fio or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{user.tg_username or '–ë–µ–∑ username'})\n"
    else:
        response_text = "–í—Å–µ —Å–æ–ª–Ω—ã—à–∫–∏"

    await message.answer(text=response_text, parse_mode="HTML")

@group_router.message(Command("chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(f'{message.chat.id}')

@group_router.message(F.text == "!–ø–æ–º–æ—â—å")
async def help_command(message: types.Message):
    response_text = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>!–∏–Ω—Ñ–∞</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.\n"
        "‚Ä¢ <code>!—Ü–∏—Ç–∞—Ç–∞</code> ‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.\n"
        "‚Ä¢ <code>!–º—É–¥—Ä–æ—Å—Ç—å</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "‚Ä¢ <code>!—Ä–∏–Ω–≥</code> ‚Äî –í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∏–Ω–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ <code>!–∞–Ω–º—É—Ç</code> ‚Äî –†–∞–∑–º—å—é—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ.\n"
        "‚Ä¢ <code>!—Ä—É–ª–µ—Ç–∫–∞</code> ‚Äî –†–∏—Å–∫–Ω–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å, –ø–æ–ø–∞–¥–µ—à—å –ª–∏ –≤ –º—É—Ç.\n"
        "‚Ä¢ <code>!–∫–ª–∞–¥–±–∏—â–µ</code> ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "‚Ä¢ <code>!—Ä–∞–∑–±—É–¥–∏—Ç—å YYYY-MM-DD HH:MM:SS</code> ‚Äî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–±—É–¥—è—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "‚Ä¢ <code>!—Ä–∞–∑–±—É–¥—è—à–∫–∏</code> ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±—É–¥—è—à–µ–∫.\n"
        "‚Ä¢ <code>!–æ—Ä–≥ –¥–Ω—è</code> ‚Äî –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–Ω—è.\n"
        "‚Ä¢ <code>!–ø–æ–¥—Å–∫–∞–∂–∏</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –±–æ—Ç–∞.\n"
        "‚Ä¢ <code>!–∂—ã–∑–Ω—å</code> ‚Äî –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–∂–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
        "‚Ä¢ <code>!–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç.\n"
        "‚Ä¢ <code>!–Ω–∞—Ö—É–π [—Ç–µ–∫—Å—Ç]</code> ‚Äî –ü–æ—Å–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–ª–∏ –∫–æ–≥–æ-—Ç–æ –Ω–∞—Ö—É–π.\n"
        "‚Ä¢ <code>!–∫—Ç–æ [—Ç–µ–∫—Å—Ç]</code> ‚Äî –£–∑–Ω–∞—Ç—å, –∫—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É.\n"
        "‚Ä¢ <code>!–∫–æ–≥–¥–∞</code> ‚Äî –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–æ–±—ã—Ç–∏—è.\n"
        "‚Ä¢ <code>!–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å [—Ç–µ–∫—Å—Ç]</code> ‚Äî –£–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.\n"
        "‚Ä¢ <code>!–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞</code> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å–µ—Ä—å–µ–∑–Ω—ã.\n\n"
        
        "<b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>!—É–µ–±–∞—Ç—å</code>, <code>!–æ–±–Ω—è—Ç—å</code>, <code>!—Å–µ–∫—Å</code>, <code>!–ø–æ–∂–∞—Ç—å —Ä—É–∫—É</code>, <code>!–ø–æ–≥–ª–∞–¥–∏—Ç—å</code>, –∏ –¥—Ä—É–≥–∏–µ ‚Äî "
        "–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n\n"

        "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∏–≤–∞:</b>\n"
        "‚Ä¢ <code>!–Ω–∞–ª–∏—Ç—å –ø–∏–≤–æ</code> ‚Äî –ù–∞–ª–∏—Ç—å –ø–∏–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.\n"
        "‚Ä¢ <code>!—Ç–æ–ø –ø–∏–≤–∞</code> ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø-10 –ª—é–±–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞.\n\n"

        "<b>–ü—Ä–æ—á–µ–µ:</b>\n"
        "‚Ä¢ <code>!—Ä–æ–ª—å</code> ‚Äî –£–∑–Ω–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.\n"
        "‚Ä¢ <code>!–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞</code> ‚Äî –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.\n\n\n"

        "<b>–ù–æ–≤–æ–µ:</b>\n"
        "‚Ä¢ <code>!–∞–¥—Ä–µ—Å *–∫–∞–∫–æ–π-—Ç–æ –∞–¥—Ä–µ—Å*</code> ‚Äî –£–∑–Ω–∞—Ç—å —Ç–æ–ø 3 –ª—é–¥–µ–π –±–ª–∏–∂–∞–π—â–∏—Ö –ø–æ –º–µ—Ç—Ä–æ –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É.\n"
        "‚Ä¢ <code>!–¥–∏–∫–ø–∏–∫ *–≤–∞—à –≤–æ–ø—Ä–æ—Å*</code> ‚Äî –°–ø—Ä–æ—Å–∏—Ç—å –¥–∏–ø—Å–∏–∫ –æ —á–µ–º-–ª–∏–±–æ, –Ω–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å\n"
        "‚Ä¢ <code>!–æ–±–æ—Å–Ω–æ–≤–∞—Ç—å</code> ‚Äî –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—É–¥–æ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n"
    )
    await message.answer(text=response_text, parse_mode="HTML")